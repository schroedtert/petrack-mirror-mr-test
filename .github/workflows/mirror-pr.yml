# SPDX-FileCopyrightText: 2022 Jakob Fritz <j.fritz@fz-juelich.de>
#
# SPDX-License-Identifier: MIT

name: Mirror to GitLab to Trigger CI

on:
  pull_request_target:
    types:
      [
        opened,
        closed,
        synchronize,
        reopened,
        ready_for_review,
        converted_to_draft,
        edited,
      ]
jobs:
  check_permission:
    runs-on: ubuntu-latest
    if: >-
      (github.repository_owner == 'schroedtert') &&
      ((github.event_name == 'push') ||
       (github.event_name == 'schedule') ||
       (github.event_name == 'pull_request_target')
      )
    steps:
      - name: Query permissions of triggering actor
        id: query_permission_triggering_actor
        if: github.event_name == 'pull_request_target'
        uses: actions-cool/check-user-permission@v2
        with:
          username: ${{ github.triggering_actor }}
          require: "write"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Interpret the queried result
        if: github.event_name == 'pull_request_target'
        run: |
          echo "Current permission level is ${{ steps.query_permission_triggering_actor.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          echo "Checking permission returned ${{ steps.query_permission_triggering_actor.outputs.require-result }}"
          if ${{ steps.query_permission_triggering_actor.outputs.require-result }}
            then
              echo 'Permissions granted'
              exit 0
            else
              echo 'Not enough permissions'
              exit 1
          fi
      - name: Pass if workflow from push or schedule
        if: >-
          (github.event_name == 'push') ||
          (github.event_name == 'schedule')
        run: exit 0

  mirror_to_gitlab:
    runs-on: ubuntu-latest
    if: >-
      (github.repository_owner == 'schroedtert') &&
      ((github.event_name == 'push') ||
       (github.event_name == 'schedule') ||
       (github.event_name == 'pull_request_target')
      )
    needs:
      - check_permission
    steps:
      - name: Set proper SHA
        run: |
          echo "${{ github.event_name }}"
          if [ "${{ github.event_name }}" == 'push' ] || [ "${{ github.event_name }}" == 'schedule' ]
          then
            echo "USED_SHA=${{ github.sha }}" >> "$GITHUB_ENV"
          fi
          if [ "${{ github.event_name }}" == 'pull_request_target' ]
          then
            echo "USED_SHA=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_ENV"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "${{ env.USED_SHA }}"
          persist-credentials: false

      - name: Mirror to GitLab
        uses: jakob-fritz/github2lab_action@main
        env:
          MODE: "mirror" # Either 'mirror', 'get_status', 'get_artifact', or 'all'
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          FORCE_PUSH: "true"
          GITLAB_HOSTNAME: "gitlab.com"
          GITLAB_PROJECT_ID: "64985430"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle PR opened
        if: github.event.action == 'opened'
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          PR_TARGET_BRANCH="main"
          PR_DRAFT="${{ github.event.pull_request.draft }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          TEMPLATE_URL="https://gitlab.com/api/v4/projects/64985430/repository/files/.gitlab%2Fmerge_request_templates%2Fdefault.md/raw?ref=main"
          TEMPLATE_CONTENT=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" "${TEMPLATE_URL}")
          TEMPLATE_CONTENT=$(echo "$TEMPLATE_CONTENT" | sed '1s/^Add your description here//')

          if [ "${PR_DRAFT}" = "true" ]; then
            MR_TITLE="Draft: ${PR_TITLE}"
            WIP="true"
          else
            MR_TITLE="${PR_TITLE}"
            WIP="false"
          fi

          FULL_DESCRIPTION="Automatically created from GitHub PR: ${PR_URL}\n\n${PR_DESCRIPTION}\n\n---\n\n${TEMPLATE_CONTENT}"
          echo ${FULL_DESCRIPTION}

          # Create MR on GitLab if it doesn't exist
          RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{
              "source_branch": "'"${PR_SOURCE_BRANCH}"'",
              "target_branch": "'"${PR_TARGET_BRANCH}"'",
              "title": "'"${MR_TITLE}"'",
              "description": "'"${FULL_DESCRIPTION}"'"
            }' \
            --request POST "https://gitlab.com/api/v4/projects/64985430/merge_requests")

          HTTP_STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "${HTTP_STATUS}" -ne 201 ]; then
            exit 1
          fi

      - name: Handle PR closed
        if: github.event.action == 'closed'
        run: |
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          MR_ID=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            "https://gitlab.com/api/v4/projects/64985430/merge_requests?source_branch=${PR_SOURCE_BRANCH}" | jq '.[0].iid')

          if [ -n "${MR_ID}" ]; then
            RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
              --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"state_event": "close"}' \
              --request PUT "https://gitlab.com/api/v4/projects/64985430/merge_requests/${MR_ID}")

            HTTP_STATUS=$(echo "${RESPONSE}" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "${HTTP_STATUS}" -ne 200 ]; then
              exit 1
            fi
          fi

      - name: Handle PR reopened
        if: github.event.action == 'reopened'
        run: |
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          MR_ID=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            "https://gitlab.com/api/v4/projects/64985430/merge_requests?source_branch=${PR_SOURCE_BRANCH}" | jq '.[0].iid')

          if [ -n "${MR_ID}" ]; then
            RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
              --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"state_event": "reopen"}' \
              --request PUT "https://gitlab.com/api/v4/projects/64985430/merge_requests/${MR_ID}")

            HTTP_STATUS=$(echo "${RESPONSE}" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "${HTTP_STATUS}" -ne 200 ]; then
              exit 1
            fi
          fi

      - name: Handle PR updated (Text)
        if: (github.event.action == 'synchronize') || (github.event.action == 'edited') || (github.event.action == 'ready_for_review') || (github.event.action == 'converted_to_draft')
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          PR_TARGET_BRANCH="main"
          PR_DRAFT="${{ github.event.pull_request.draft }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          # Fetch the GitLab MR template from the repository
          TEMPLATE_URL="https://gitlab.com/api/v4/projects/64985430/repository/files/.gitlab%2Fmerge_request_templates%2Fdefault.md/raw?ref=main"
          TEMPLATE_CONTENT=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" "${TEMPLATE_URL}")

          # Remove the first line ("**Add your description here**")
          TEMPLATE_CONTENT=$(echo "${TEMPLATE_CONTENT}" | sed '1d')
          # Escape newlines and special characters properly
          TEMPLATE_CONTENT=$(echo "${TEMPLATE_CONTENT}" | sed ':a;N;$!ba;s/\n/\\n/g' | jq -Rs .)

          # Combine GitHub PR description with the GitLab template
          FULL_DESCRIPTION="Automatically created from GitHub PR: ${PR_URL}\n\n${PR_DESCRIPTION}\n\n---\n\n${TEMPLATE_CONTENT}"
          FULL_DESCRIPTION=$(echo "${FULL_DESCRIPTION}" | sed ':a;N;$!ba;s/\n/\\n/g' | jq -Rs .)
          echo ${FULL_DESCRIPTION}

          if [ "${PR_DRAFT}" = "true" ]; then
            MR_TITLE="Draft: ${PR_TITLE}"
            WIP="true"
          else
            MR_TITLE="${PR_TITLE}"
            WIP="false"
          fi

          # Update the MR in GitLab
          MR_ID=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            "https://gitlab.com/api/v4/projects/64985430/merge_requests?source_branch=${PR_SOURCE_BRANCH}" | jq '.[0].iid')

          if [ -n "${MR_ID}" ]; then
            JSON_PAYLOAD=$(cat <<EOF
            {
              "title": "${MR_TITLE}",
              "description": ${FULL_DESCRIPTION},
              "work_in_progress": ${WIP}
            }
          EOF
            )

            echo "Final JSON Payload: ${JSON_PAYLOAD}"
            RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
              --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data "${JSON_PAYLOAD}" \
              --request PUT "https://gitlab.com/api/v4/projects/64985430/merge_requests/${MR_ID}")

            echo ${RESPONSE}

            HTTP_STATUS=$(echo "${RESPONSE}" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            
            if [ "${HTTP_STATUS}" -ne 200 ]; then
              exit 1
            fi
          fi
