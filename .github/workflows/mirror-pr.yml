# SPDX-FileCopyrightText: 2022 Jakob Fritz <j.fritz@fz-juelich.de>
#
# SPDX-License-Identifier: MIT

name: Mirror to Gitlab to trigger CI

on:
  pull_request_target:

jobs:
  check_permission:
    runs-on: ubuntu-latest
    if: >-
      (github.repository_owner == 'schroedtert') &&
      ((github.event_name == 'push') ||
       (github.event_name == 'schedule') ||
       (github.event_name == 'pull_request_target')
      )
    steps:
      - name: Query permissions of triggering actor
        id: query_permission_triggering_actor
        if: github.event_name == 'pull_request_target'
        uses: actions-cool/check-user-permission@v2
        with:
          username: ${{ github.triggering_actor }}
          require: "write"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Interpret the queried result
        if: github.event_name == 'pull_request_target'
        run: |
          echo "Current permission level is ${{ steps.query_permission_triggering_actor.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          echo "Checking permission returned ${{ steps.query_permission_triggering_actor.outputs.require-result }}"
          if ${{ steps.query_permission_triggering_actor.outputs.require-result }}
            then
              echo 'Permissions granted'
              exit 0
            else
              echo 'Not enough permissions'
              exit 1
          fi
      - name: Pass if workflow from push or schedule
        if: >-
          (github.event_name == 'push') ||
          (github.event_name == 'schedule')
        run: exit 0

  mirror_to_gitlab:
    runs-on: ubuntu-latest
    if: >-
      (github.repository_owner == 'schroedtert') &&
      ((github.event_name == 'push') ||
       (github.event_name == 'schedule') ||
       (github.event_name == 'pull_request_target')
      )
    needs:
      - check_permission
    steps:
      - name: set proper sha
        run: |
          echo "${{ github.event_name }}"
          if [ "${{ github.event_name }}" == 'push' ] || [ "${{ github.event_name }}" == 'schedule' ]
          then
            echo "USED_SHA=${{ github.sha }}" >> "$GITHUB_ENV"
          fi
          if [ "${{ github.event_name }}" == 'pull_request_target' ]
          then
            echo "USED_SHA=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_ENV"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "${{ env.USED_SHA }}"
          persist-credentials: false

      - name: Mirror to GitLab
        uses: jakob-fritz/github2lab_action@main
        env:
          MODE: "mirror" # Either 'mirror', 'get_status', 'get_artifact', or 'all'
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          FORCE_PUSH: "true"
          GITLAB_HOSTNAME: "gitlab.com"
          GITLAB_PROJECT_ID: "64985430"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Merge Request on GitLab
        run: |
          # Extract PR details
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          PR_TARGET_BRANCH="main"
          PR_DRAFT="${{ github.event.pull_request.draft }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          # Define draft state in GitLab
          if [ "$PR_DRAFT" = "true" ]; then
            MR_TITLE="Draft: $PR_TITLE"
          else
            MR_TITLE="$PR_TITLE"
          fi

          # Prepare the JSON payload for GitLab API
          JSON_PAYLOAD=$(cat <<EOF
          {
            "source_branch": "$PR_SOURCE_BRANCH",
            "target_branch": "$PR_TARGET_BRANCH",
            "title": "$MR_TITLE",
            "description": "Automatically created from GitHub PR: $PR_URL"
          }
          EOF
          )
          # Call GitLab API to create or update the MR and store the response
          RESPONSE=$(curl --verbose --write-out "HTTPSTATUS:%{http_code}" \
            --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data "$JSON_PAYLOAD" \
            --request POST "https://gitlab.com/api/v4/projects/64985430/merge_requests")

          # Extract the response body and HTTP status code
          RESPONSE_BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')
          HTTP_STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          # Output the response for debugging
          echo "Response Body: $RESPONSE_BODY"
          echo "HTTP Status Code: $HTTP_STATUS"

          # Check for successful status code (e.g., 201 Created)
          if [ "$HTTP_STATUS" -ne 201 ]; then
            echo "Failed to create or update the merge request. Status code: $HTTP_STATUS"
            exit 1
          fi
