# SPDX-FileCopyrightText: 2022 Jakob Fritz <j.fritz@fz-juelich.de>
#
# SPDX-License-Identifier: MIT

name: Mirror to GitLab to Trigger CI

on:
  pull_request_target:
    types:
      [
        opened,
        closed,
        synchronize,
        reopened,
        ready_for_review,
        converted_to_draft,
        edited,
      ]
env:
  GITLAB_PROJECT_ID: 64985430
  PR_TARGET_BRANCH: "main"

jobs:
  check_permission:
    runs-on: ubuntu-latest
    if: >-
      (github.repository_owner == 'schroedtert') &&
      ((github.event_name == 'push') ||
       (github.event_name == 'schedule') ||
       (github.event_name == 'pull_request_target')
      )
    steps:
      - name: Query permissions of triggering actor
        id: query_permission_triggering_actor
        if: github.event_name == 'pull_request_target'
        uses: actions-cool/check-user-permission@v2
        with:
          username: ${{ github.triggering_actor }}
          require: "write"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Interpret the queried result
        if: github.event_name == 'pull_request_target'
        run: |
          echo "Current permission level is ${{ steps.query_permission_triggering_actor.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          echo "Checking permission returned ${{ steps.query_permission_triggering_actor.outputs.require-result }}"
          if ${{ steps.query_permission_triggering_actor.outputs.require-result }}
            then
              echo 'Permissions granted'
              exit 0
            else
              echo 'Not enough permissions'
              exit 1
          fi
      - name: Pass if workflow from push or schedule
        if: >-
          (github.event_name == 'push') ||
          (github.event_name == 'schedule')
        run: exit 0

  mirror_to_gitlab:
    runs-on: ubuntu-latest
    if: >-
      (github.repository_owner == 'schroedtert') &&
      ((github.event_name == 'push') ||
       (github.event_name == 'schedule') ||
       (github.event_name == 'pull_request_target')
      )
    needs:
      - check_permission
    steps:
      - name: Set proper SHA
        run: |
          echo "${{ github.event_name }}"
          if [ "${{ github.event_name }}" == 'push' ] || [ "${{ github.event_name }}" == 'schedule' ]
          then
            echo "USED_SHA=${{ github.sha }}" >> "$GITHUB_ENV"
          fi
          if [ "${{ github.event_name }}" == 'pull_request_target' ]
          then
            echo "USED_SHA=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_ENV"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "${{ env.USED_SHA }}"
          persist-credentials: false

      - name: Mirror to GitLab
        uses: jakob-fritz/github2lab_action@main
        env:
          MODE: "mirror" # Either 'mirror', 'get_status', 'get_artifact', or 'all'
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          FORCE_PUSH: "true"
          GITLAB_HOSTNAME: "gitlab.com"
          GITLAB_PROJECT_ID: ${{ env.GITLAB_PROJECT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle PR opened
        if: github.event.action == 'opened'
        shell: bash
        run: |
          set -x

          # Define variables
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          PR_DRAFT="${{ github.event.pull_request.draft }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          # Escape PR_DESCRIPTION during assignment to handle special characters
          # Use jq to properly encode the pull request body as a JSON-safe string
          PR_DESCRIPTION=$(jq -Rsa . <<< "${{ github.event.pull_request.body }}")

          # Fetch the GitLab MR template
          TEMPLATE_URL="https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/repository/files/.gitlab%2Fmerge_request_templates%2Fdefault.md/raw?ref=${PR_TARGET_BRANCH}"
          TEMPLATE_CONTENT=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" "${TEMPLATE_URL}")

          # Remove the first line ("**Add your description here**")
          TEMPLATE_CONTENT=$(echo "${TEMPLATE_CONTENT}" | sed '1d')

          # Prepare the full description
          FULL_DESCRIPTION=$(printf "Automatically created from GitHub PR: %s\n\n%s\n\n---\n\n%s" \
            "$PR_URL" "$(echo $PR_DESCRIPTION | jq -r)" "$TEMPLATE_CONTENT")

          # Escape the full description for JSON
          FULL_DESCRIPTION_ESCAPED=$(jq -Rsa . <<< "$FULL_DESCRIPTION")

          echo "Escaped description: $FULL_DESCRIPTION_ESCAPED"

          # Define title and WIP status
          if [ "${PR_DRAFT}" = "true" ]; then
            MR_TITLE="Draft: ${PR_TITLE}"
            WIP="true"
          else
            MR_TITLE="${PR_TITLE}"
            WIP="false"
          fi

          # Create GitLab MR
          RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
            --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data-binary @- <<EOF
          {
            "source_branch": "${PR_SOURCE_BRANCH}",
            "target_branch": "${PR_TARGET_BRANCH}",
            "title": "${MR_TITLE}",
            "description": ${FULL_DESCRIPTION_ESCAPED},
            "work_in_progress": ${WIP}
          }
          EOF
          )

          HTTP_STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "${HTTP_STATUS}" -ne 201 ]; then
            echo "Failed to create MR. Status code: $HTTP_STATUS"
            exit 1
          fi

      - name: Handle PR reopened
        if: github.event.action == 'reopened'
        run: |
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          MR_ID=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/merge_requests?source_branch=${PR_SOURCE_BRANCH}" | jq '.[0].iid')

          if [ -n "${MR_ID}" ]; then
            RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
              --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data '{"state_event": "reopen"}' \
              --request PUT "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/merge_requests/${MR_ID}")

            HTTP_STATUS=$(echo "${RESPONSE}" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "${HTTP_STATUS}" -ne 200 ]; then
              exit 1
            fi
          fi

      - name: Handle PR updated (Text)
        if: (github.event.action == 'synchronize') || (github.event.action == 'edited') || (github.event.action == 'ready_for_review') || (github.event.action == 'converted_to_draft')
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_SOURCE_BRANCH="PullRequest_${{ github.event.number }}"
          PR_DRAFT="${{ github.event.pull_request.draft }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_DESCRIPTION="${{ github.event.pull_request.body }}"

          # Fetch the GitLab MR template from the repository
          TEMPLATE_URL="https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/repository/files/.gitlab%2Fmerge_request_templates%2Fdefault.md/raw?ref=${PR_TARGET_BRANCH}"
          TEMPLATE_CONTENT=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" "${TEMPLATE_URL}")

          # Remove the first line ("**Add your description here**")
          TEMPLATE_CONTENT=$(echo "${TEMPLATE_CONTENT}" | sed '1d')

          # Prepare the GitHub PR description and the GitLab template
          FULL_DESCRIPTION="Automatically created from GitHub PR: ${PR_URL}\n\n${PR_DESCRIPTION}\n\n---${TEMPLATE_CONTENT}"

          # Escape only necessary characters: backslashes and quotes
          FULL_DESCRIPTION_ESCAPED="${FULL_DESCRIPTION//$'\n'/\\n}"

          # Set the MR title and WIP status based on PR draft state
          if [ "${PR_DRAFT}" = "true" ]; then
            MR_TITLE="Draft: ${PR_TITLE}"
            WIP="true"
          else
            MR_TITLE="${PR_TITLE}"
            WIP="false"
          fi

          # Check if the MR exists in GitLab
          MR_ID=$(curl --silent --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/merge_requests?source_branch=${PR_SOURCE_BRANCH}" | jq '.[0].iid')

          if [ -n "${MR_ID}" ]; then
            # Prepare the payload for updating the MR
            JSON_PAYLOAD=$(cat <<EOF
            {
              "title": "${MR_TITLE}",
              "description": "${FULL_DESCRIPTION_ESCAPED}",
              "work_in_progress": ${WIP}
            }
          EOF
            )

            # Send the update request to GitLab
            RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
              --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
              --header "Content-Type: application/json" \
              --data "${JSON_PAYLOAD}" \
              --request PUT "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_ID}/merge_requests/${MR_ID}")

            echo "Response: ${RESPONSE}"

            # Extract and check the HTTP status
            HTTP_STATUS=$(echo "${RESPONSE}" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [ "${HTTP_STATUS}" -ne 200 ]; then
              echo "Failed to update MR. Status code: ${HTTP_STATUS}"
              exit 1
            fi
          fi
